// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::shooterShooterMotor;
std::shared_ptr<SpeedController> RobotMap::driveLeftFront;
std::shared_ptr<SpeedController> RobotMap::driveLeftRear;
std::shared_ptr<SpeedController> RobotMap::driveRightFront;
std::shared_ptr<SpeedController> RobotMap::driveRightRear;
std::shared_ptr<RobotDrive> RobotMap::driveDriver;
std::shared_ptr<SpeedController> RobotMap::succSucc1;
std::shared_ptr<SpeedController> RobotMap::climberClimberMotor;
std::shared_ptr<AnalogAccelerometer> RobotMap::navigationNavAccel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    shooterShooterMotor.reset(new Spark(5));
    lw->AddActuator("Shooter", "ShooterMotor", std::static_pointer_cast<VictorSP>(shooterShooterMotor));
    
    driveLeftFront.reset(new VictorSP(0));
    lw->AddActuator("Drive", "LeftFront", std::static_pointer_cast<VictorSP>(driveLeftFront));
    
    driveLeftRear.reset(new VictorSP(1));
    lw->AddActuator("Drive", "LeftRear", std::static_pointer_cast<VictorSP>(driveLeftRear));
    
    driveRightFront.reset(new VictorSP(2));
    lw->AddActuator("Drive", "RightFront", std::static_pointer_cast<VictorSP>(driveRightFront));
    
    driveRightRear.reset(new VictorSP(3));
    lw->AddActuator("Drive", "RightRear", std::static_pointer_cast<VictorSP>(driveRightRear));
    
    driveDriver.reset(new RobotDrive(driveLeftFront, driveLeftRear,
              driveRightFront, driveRightRear));
    
    driveDriver->SetSafetyEnabled(true);
        driveDriver->SetExpiration(0.1);
        driveDriver->SetSensitivity(0.5);
        driveDriver->SetMaxOutput(1.0);

    succSucc1.reset(new Spark(4));
    //lw->AddActuator("Succ", "Succ1", succSucc1);
    
    climberClimberMotor.reset(new Spark(6));
    lw->AddActuator("Climber", "ClimberMotor", std::static_pointer_cast<Spark>(climberClimberMotor));
    
    navigationNavAccel.reset(new AnalogAccelerometer(1));
    lw->AddSensor("Navigation", "NavAccel", navigationNavAccel);
    navigationNavAccel->SetSensitivity(0.0);
        navigationNavAccel->SetZero(2.5);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
